// <auto-generated />
using System;
using MKW.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MKW.Data.Context.Migrations
{
    [DbContext(typeof(MKWContext))]
    partial class MKWContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("TB_USR_ROLES", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11111,
                            ConcurrencyStamp = "0eb384ad-84c2-4f79-9627-3811ee475043",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 11112,
                            ConcurrencyStamp = "aecb8ed1-331b-4fd6-8b93-3b3ddd37a55e",
                            Name = "standard",
                            NormalizedName = "STANDARD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_USR_ROLE_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TB_USR_USER_CLAIM", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("TB_USR_USER_LOGIN", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("TB_USR_USER_ROLE", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 11111,
                            RoleId = 11111
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("TB_USR_USER_TOKEN", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("EXTERNAL_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int>("PlatformCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("PlatformCategoryId");

                    b.ToTable("TB_MKW_CONTENT", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.ContentGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("GENRE_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("GenreId");

                    b.ToTable("TB_MKW_CONTENT_GENRE", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_MKW_GENRE", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("URL");

                    b.HasKey("Id");

                    b.ToTable("TB_MKW_PLATFORM", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 360, DateTimeKind.Local).AddTicks(4514),
                            Name = "TMDb",
                            UUID = new Guid("deb123ba-6f03-459f-b3ae-120ccc2c51cc"),
                            Url = "https://api.themoviedb.org/3"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 360, DateTimeKind.Local).AddTicks(4519),
                            Name = "YouTube",
                            UUID = new Guid("704de8e5-3a39-4510-86e3-5b517d2fd1fc"),
                            Url = "https://www.googleapis.com/youtube/v3"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 360, DateTimeKind.Local).AddTicks(4529),
                            Name = "TikTok",
                            UUID = new Guid("1da02678-c633-4177-890d-8086534694f9"),
                            Url = ""
                        });
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.PlatformCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int")
                        .HasColumnName("PLATFORM_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.ToTable("TB_MKW_PLATFORM_CATEGORY", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 360, DateTimeKind.Local).AddTicks(6241),
                            Name = "Filme",
                            PlatformId = 1,
                            UUID = new Guid("856def35-dc43-48b7-9add-9311ab164a15")
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 360, DateTimeKind.Local).AddTicks(6251),
                            Name = "Filme",
                            PlatformId = 2,
                            UUID = new Guid("0a32fd7f-2436-46d4-95e7-290f612ddcb0")
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 360, DateTimeKind.Local).AddTicks(6253),
                            Name = "Perfil",
                            PlatformId = 3,
                            UUID = new Guid("903e28a0-f37f-494f-b06c-d8d1d53dc7b4")
                        });
                });

            modelBuilder.Entity("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("TB_USR_USERS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 11111,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "33fb90be-9a32-4482-83ad-a89e221a7fca",
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 350, DateTimeKind.Local).AddTicks(1642),
                            Email = "projeto.mkw@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Administrador",
                            LastName = "MyKidsWatch",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROJETO.MWK@GMAIL.COM",
                            NormalizedUserName = "ADMIN11111",
                            PasswordHash = "AQAAAAEAACcQAAAAEG/S7DGT8O1G/IfnhIw3fnQADTan+vVg9p0aOMyrms83IAUlav/XRNAhspGQPyOlMg==",
                            PhoneNumber = "5511978019550",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "db3cb584-8182-40a4-968a-bed3b23e3313",
                            TwoFactorEnabled = false,
                            UserName = "admin11111"
                        });
                });

            modelBuilder.Entity("MKW.Domain.Entities.IdentityAggregate.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.Property<int>("KeyCode")
                        .HasColumnType("int")
                        .HasColumnName("KEY_CODE");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TOKEN");

                    b.HasKey("UserId", "KeyCode");

                    b.ToTable("TB_USR_USER_KEYCODE", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.PremiumPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<bool>("AutoRenewal")
                        .HasColumnType("bit")
                        .HasColumnName("AUTORENEWAL");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("END_DATE");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("START_DATE");

                    b.Property<int>("TierPlanId")
                        .HasColumnType("int")
                        .HasColumnName("TIER_PLAN_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("TierPlanId");

                    b.ToTable("TB_PRM_PREMIUM_PERSON", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.Tier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit")
                        .HasColumnName("IS_PREMIUM");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_PRM_TIER", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.TierPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("PRICE");

                    b.Property<int>("TierId")
                        .HasColumnType("int")
                        .HasColumnName("TIER_ID");

                    b.Property<int>("TimespanId")
                        .HasColumnType("int")
                        .HasColumnName("TIMESPAN_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("TierId");

                    b.HasIndex("TimespanId");

                    b.ToTable("TB_PRM_TIER_PLAN", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.Timespan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("Days")
                        .HasColumnType("int")
                        .HasColumnName("DAYS");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_PRM_TIMESPAN", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReportAggregate.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("COMMENT_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DETAILS");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int")
                        .HasColumnName("REASON_ID");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("REVIEW_ID");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("ReviewId");

                    b.HasIndex("StatusId");

                    b.ToTable("TB_RPR_REPORT", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReportAggregate.ReportReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DESCRIPTION");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TITLE");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_RPR_REASON", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(5506),
                            Description = "Abusive or threatening speech or writing that expresses prejudice on the basis of ethnicity, religion, sexual orientation, or similar grounds.",
                            Title = "Hate Speech",
                            UUID = new Guid("5cfdf859-e25a-4b57-ac97-c43786813fb3")
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(5511),
                            Description = "Aggressive pressure or intimidation against an individual or group.",
                            Title = "Harassment",
                            UUID = new Guid("342391e9-4fb4-476b-b5bb-a3eb70e1c101")
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(5513),
                            Description = "Material depicting sexual behavior. The sexual behavior involved may be explicit, implicit sexual behavior such as flirting, or include sexual language and euphemisms.",
                            Title = "Sexual Content",
                            UUID = new Guid("2b6ecc27-9a27-4b9b-90ca-6afc482ce518")
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(5515),
                            Description = "Other reasons. Please provide more information.",
                            Title = "Others",
                            UUID = new Guid("6ef25a99-ffc7-4024-b330-507ec23dc4ee")
                        });
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReportAggregate.ReportStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_RPR_STATUS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(6787),
                            Name = "Análise Pendente",
                            UUID = new Guid("92dee59e-b75c-4b69-ace4-c4fecfcc723b")
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(6791),
                            Name = "Analisado",
                            UUID = new Guid("f8cc3fe7-d6b7-4eb7-955c-d0eae168c559")
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 361, DateTimeKind.Local).AddTicks(6794),
                            Name = "Descartado",
                            UUID = new Guid("d6f3dd38-eadc-421e-a565-1261949b42db")
                        });
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasColumnName("PRICE");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("VALUE");

                    b.HasKey("Id");

                    b.ToTable("TB_RVW_AWARD", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.AwardPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int>("AwardId")
                        .HasColumnType("int")
                        .HasColumnName("AWARD_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("REVIEW_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("AwardId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReviewId");

                    b.ToTable("TB_RVW_AWARD_PERSON", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("PARENT_COMMENT_ID");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<int?>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("POST_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ReviewId");

                    b.ToTable("TB_RVW_COMMENT", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.CommentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("COMMENT_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEXT");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("TB_RVW_COMMENT_DETAILS", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int>("ContentId")
                        .HasColumnType("int")
                        .HasColumnName("CONTENT_ID");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("PersonId");

                    b.ToTable("TB_RVW_REVIEW", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.ReviewDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("POST_ID");

                    b.Property<int>("Stars")
                        .HasColumnType("int")
                        .HasColumnName("STARS");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TITLE");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("TB_RVW_REVIEW_DETAILS", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.AgeRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("FinalAge")
                        .HasColumnType("int")
                        .HasColumnName("FINAL_AGE");

                    b.Property<int>("InitialAge")
                        .HasColumnType("int")
                        .HasColumnName("INITIAL_AGE");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_USR_AGE_RANGE", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<bool>("IsBinary")
                        .HasColumnType("bit")
                        .HasColumnName("IS_BINARY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NAME");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_USR_GENDER", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AlterDate = new DateTime(2023, 10, 4, 18, 38, 52, 358, DateTimeKind.Local).AddTicks(8739),
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 358, DateTimeKind.Local).AddTicks(8736),
                            IsBinary = true,
                            Name = "Masculino",
                            UUID = new Guid("db19ca43-dcca-4e17-8168-229fe5c140b4")
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            AlterDate = new DateTime(2023, 10, 4, 18, 38, 52, 358, DateTimeKind.Local).AddTicks(8760),
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 358, DateTimeKind.Local).AddTicks(8759),
                            IsBinary = true,
                            Name = "Feminino",
                            UUID = new Guid("bb653181-9caa-4638-b5f3-aa85d3ac61f7")
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            AlterDate = new DateTime(2023, 10, 4, 18, 38, 52, 358, DateTimeKind.Local).AddTicks(8762),
                            CreateDate = new DateTime(2023, 10, 4, 18, 38, 52, 358, DateTimeKind.Local).AddTicks(8762),
                            IsBinary = false,
                            Name = "Não Binário",
                            UUID = new Guid("0446622e-2074-4e55-94a4-cb5898effb23")
                        });
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int>("Coins")
                        .HasColumnType("int")
                        .HasColumnName("COINS");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("OperationTypeId")
                        .HasColumnType("int")
                        .HasColumnName("OPERATION_TYPE_ID");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("TB_USR_OPERATION", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.OperationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<bool>("Credit")
                        .HasColumnType("bit")
                        .HasColumnName("CREDIT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TYPE");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.ToTable("TB_USR_OPERATION_TYPE", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BIRTHDATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GENDER_ID");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IMAGE_URL");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("USER_ID");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId");

                    b.ToTable("TB_USR_PERSON", (string)null);
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.PersonChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("ACTIVE");

                    b.Property<int>("AgeRangeId")
                        .HasColumnType("int")
                        .HasColumnName("AGE_RANGE_ID");

                    b.Property<DateTime?>("AlterDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ALTER_DATE");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("GENDER_ID");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PERSON_ID");

                    b.Property<Guid?>("UUID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UUID");

                    b.HasKey("Id");

                    b.HasIndex("AgeRangeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("PersonId");

                    b.ToTable("TB_USR_PERSON_CHILD", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Content", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ContentAggregate.PlatformCategory", "PlatformCategory")
                        .WithMany("Contents")
                        .HasForeignKey("PlatformCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlatformCategory");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.ContentGenre", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ContentAggregate.Content", "Content")
                        .WithMany("ContentGenre")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.ContentAggregate.Genre", "Genre")
                        .WithMany("ContentGenre")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.PlatformCategory", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ContentAggregate.Platform", "Platform")
                        .WithMany("PlatformCategories")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("MKW.Domain.Entities.IdentityAggregate.UserToken", b =>
                {
                    b.HasOne("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.PremiumPerson", b =>
                {
                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("PremiumPerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.PremiumAggregate.TierPlan", "TierPlan")
                        .WithMany("PremiumPerson")
                        .HasForeignKey("TierPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("TierPlan");
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.TierPlan", b =>
                {
                    b.HasOne("MKW.Domain.Entities.PremiumAggregate.Tier", "Tier")
                        .WithMany("TierPlans")
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.PremiumAggregate.Timespan", "Timespan")
                        .WithMany("TierPlans")
                        .HasForeignKey("TimespanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tier");

                    b.Navigation("Timespan");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReportAggregate.Report", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId");

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("Reports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.ReportAggregate.ReportReason", "Reason")
                        .WithMany("Reports")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Review", "Review")
                        .WithMany("Reports")
                        .HasForeignKey("ReviewId");

                    b.HasOne("MKW.Domain.Entities.ReportAggregate.ReportStatus", "Status")
                        .WithMany("Reports")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Person");

                    b.Navigation("Reason");

                    b.Navigation("Review");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.AwardPerson", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Award", "Award")
                        .WithMany("AwardPerson")
                        .HasForeignKey("AwardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("AwardsGiven")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Review", "Review")
                        .WithMany("Awards")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Award");

                    b.Navigation("Person");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Comment", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Comment", "ParentComment")
                        .WithMany("Answers")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("Comments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("ReviewId");

                    b.Navigation("ParentComment");

                    b.Navigation("Person");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.CommentDetails", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Comment", "Comment")
                        .WithMany("CommentDetails")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Review", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ContentAggregate.Content", "Content")
                        .WithMany("Reviews")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("Reviews")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.ReviewDetails", b =>
                {
                    b.HasOne("MKW.Domain.Entities.ReviewAggregate.Review", "Review")
                        .WithMany("ReviewDetails")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Operation", b =>
                {
                    b.HasOne("MKW.Domain.Entities.UserAggregate.OperationType", "OperationType")
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("Operations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Person", b =>
                {
                    b.HasOne("MKW.Domain.Entities.UserAggregate.Gender", "Gender")
                        .WithMany("People")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.IdentityAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.PersonChild", b =>
                {
                    b.HasOne("MKW.Domain.Entities.UserAggregate.AgeRange", "AgeRange")
                        .WithMany("Children")
                        .HasForeignKey("AgeRangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Gender", "Gender")
                        .WithMany("Children")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MKW.Domain.Entities.UserAggregate.Person", "Person")
                        .WithMany("Children")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AgeRange");

                    b.Navigation("Gender");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Content", b =>
                {
                    b.Navigation("ContentGenre");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Genre", b =>
                {
                    b.Navigation("ContentGenre");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.Platform", b =>
                {
                    b.Navigation("PlatformCategories");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ContentAggregate.PlatformCategory", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.Tier", b =>
                {
                    b.Navigation("TierPlans");
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.TierPlan", b =>
                {
                    b.Navigation("PremiumPerson");
                });

            modelBuilder.Entity("MKW.Domain.Entities.PremiumAggregate.Timespan", b =>
                {
                    b.Navigation("TierPlans");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReportAggregate.ReportReason", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReportAggregate.ReportStatus", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Award", b =>
                {
                    b.Navigation("AwardPerson");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Comment", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CommentDetails");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("MKW.Domain.Entities.ReviewAggregate.Review", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Comments");

                    b.Navigation("Reports");

                    b.Navigation("ReviewDetails");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.AgeRange", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Gender", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("People");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.OperationType", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("MKW.Domain.Entities.UserAggregate.Person", b =>
                {
                    b.Navigation("AwardsGiven");

                    b.Navigation("Children");

                    b.Navigation("Comments");

                    b.Navigation("Operations");

                    b.Navigation("PremiumPerson");

                    b.Navigation("Reports");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
